[{"insert":"My Token.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @title Champagne Tanuki Token (CNT)\n/// @notice ERC20互換、追加発行はownerのみ、バーン不可\n\ncontract ChampagneTanuki {\n    string public name = \"Champagne Tanuki\";\n    string public symbol = \"CNT\";\n    uint8 public decimals = 18;\n    uint256 public totalSupply;\n\n    address public owner;\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not owner\");\n        _;\n    }\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    constructor() {\n        owner = msg.sender;\n        uint256 initialSupply = 100_000_000 * (10 ** uint256(decimals));\n        totalSupply = initialSupply;\n        balanceOf[owner] = initialSupply;\n        emit Transfer(address(0), owner, initialSupply);\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        require(balanceOf[msg.sender] >= value, \"Insufficient balance\");\n        balanceOf[msg.sender] -= value;\n        balanceOf[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(balanceOf[from] >= value, \"Insufficient balance\");\n        require(allowance[from][msg.sender] >= value, \"Allowance exceeded\");\n        balanceOf[from] -= value;\n        balanceOf[to] += value;\n        allowance[from][msg.sender] -= value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n\n    function mint(address to, uint256 value) public onlyOwner {\n        totalSupply += value;\n        balanceOf[to] += value;\n        emit Transfer(address(0), to, value);\n    }\n}\n"}]